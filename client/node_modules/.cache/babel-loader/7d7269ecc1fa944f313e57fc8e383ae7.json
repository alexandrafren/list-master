{"ast":null,"code":"import _classCallCheck from \"/home/learn/code/list-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/learn/code/list-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/learn/code/list-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/learn/code/list-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/learn/code/list-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/learn/code/list-master/client/src/containers/SuggestionContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SuggestionInput from '../components/SuggestionInput';\nimport Factoid from '../components/Factoid';\nimport Todo from '../components/Todo';\nimport { bindActionCreators } from 'redux';\nimport { fetchTodos, deleteTodo } from '../actions/todoActions';\n\nvar SuggestionContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SuggestionContainer, _Component);\n\n  function SuggestionContainer() {\n    var _this;\n\n    _classCallCheck(this, SuggestionContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SuggestionContainer).call(this));\n\n    _this.suggestionLogic = function (suggestionState) {\n      _this.props.fetchTodos();\n\n      var suggestionTodos = _this.props.todos;\n      suggestionTodos = suggestionTodos.filter(function (todo) {\n        return todo.time_to_complete === suggestionState.time;\n      });\n      suggestionTodos.filter(function (todo) {\n        return todo.level_of_difficulty === suggestionState.feeling;\n      });\n      console.log(suggestionTodos);\n      console.log(typeof suggestionTodos[_this.state.index]);\n\n      if (suggestionTodos.length < _this.state.index) {\n        _this.setState({\n          suggestedTodo: \"There are no more Suggested Todos that fit your parameters. Try entering new parameters or adding todos\"\n        });\n      } else {\n        var updateIndex = _this.state.index + 1;\n\n        _this.setState({\n          suggestedTodo: React.createElement(React.Fragment, null, React.createElement(Todo, {\n            props: suggestionTodos[_this.state.index],\n            deleteTodo: _this.props.deleteTodo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }), React.createElement(\"button\", {\n            onClick: _this.pushButton,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }, \"Want a different suggestion?\")),\n          suggestionFeeling: suggestionState.feeling,\n          suggestionTime: suggestionState.time,\n          index: updateIndex\n        });\n      }\n    };\n\n    _this.pushButton = function (event) {\n      event.preventDefault();\n      var sugparams = _this.state;\n\n      _this.suggestionLogic(sugparams);\n    };\n\n    _this.state = {\n      index: 0,\n      suggestedTodo: \"You haven't entered any parameters for a suggestion!\",\n      suggestionFeeling: \"\",\n      suggestionTime: \"\"\n    };\n    return _this;\n  } //include logic to find a suggestion here\n  //render the suggestion, initial should be to add a todo\n\n\n  _createClass(SuggestionContainer, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"suggestion\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Looking for a Suggested Task?\"), React.createElement(SuggestionInput, {\n        suggestionLogic: this.suggestionLogic,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        class: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Your Suggestion:\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), this.state.suggestedTodo, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Factoid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SuggestionContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    todos: state.todos\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchTodos: fetchTodos,\n    deleteTodo: deleteTodo\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SuggestionContainer);","map":{"version":3,"sources":["/home/learn/code/list-master/client/src/containers/SuggestionContainer.js"],"names":["React","Component","connect","SuggestionInput","Factoid","Todo","bindActionCreators","fetchTodos","deleteTodo","SuggestionContainer","suggestionLogic","suggestionState","props","suggestionTodos","todos","filter","todo","time_to_complete","time","level_of_difficulty","feeling","console","log","state","index","length","setState","suggestedTodo","updateIndex","pushButton","suggestionFeeling","suggestionTime","event","preventDefault","sugparams","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SuggestionInput from '../components/SuggestionInput'\r\nimport Factoid from '../components/Factoid'\r\nimport Todo from '../components/Todo'\r\nimport { bindActionCreators } from 'redux';\r\nimport { fetchTodos, deleteTodo} from '../actions/todoActions'\r\n\r\nclass SuggestionContainer extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      index: 0,\r\n      suggestedTodo: \"You haven't entered any parameters for a suggestion!\",\r\n      suggestionFeeling: \"\",\r\n      suggestionTime: \"\"\r\n    }\r\n  }\r\n\r\n  //include logic to find a suggestion here\r\n  //render the suggestion, initial should be to add a todo\r\n\r\n  suggestionLogic = (suggestionState) => {\r\n    this.props.fetchTodos();\r\n    let suggestionTodos = this.props.todos;\r\n    suggestionTodos = suggestionTodos.filter((todo) => todo.time_to_complete === suggestionState.time)\r\n    suggestionTodos.filter((todo) => todo.level_of_difficulty === suggestionState.feeling)\r\n    console.log(suggestionTodos)\r\n    console.log( typeof suggestionTodos[this.state.index])\r\n    if (suggestionTodos.length < this.state.index) {\r\n      this.setState({\r\n        suggestedTodo: \"There are no more Suggested Todos that fit your parameters. Try entering new parameters or adding todos\"\r\n      })\r\n    }\r\n    else {\r\n    let updateIndex = this.state.index + 1\r\n    this.setState({\r\n      suggestedTodo: <><Todo props={suggestionTodos[this.state.index]} deleteTodo={this.props.deleteTodo} /><button onClick={this.pushButton}>Want a different suggestion?</button></>,\r\n      suggestionFeeling: suggestionState.feeling,\r\n      suggestionTime: suggestionState.time,\r\n      index: updateIndex\r\n    })\r\n  }\r\n}\r\n\r\n  pushButton = (event) => {\r\n    event.preventDefault()\r\n    let sugparams = this.state\r\n    this.suggestionLogic(sugparams)\r\n  }\r\n\r\n\r\n  render() {\r\n    return(\r\n    <>\r\n      <div className=\"suggestion\">\r\n          <div class=\"header\">\r\n            Looking for a Suggested Task?\r\n          </div>\r\n          <SuggestionInput suggestionLogic={this.suggestionLogic}/>\r\n          <br />\r\n          <div class=\"header\">\r\n            Your Suggestion: \r\n          </div>\r\n          <br />\r\n          {this.state.suggestedTodo}\r\n          <br />\r\n          <br />\r\n          <Factoid />\r\n      </div>\r\n    </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    todos: state.todos\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return bindActionCreators({\r\n    fetchTodos: fetchTodos, \r\n    deleteTodo: deleteTodo\r\n  }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SuggestionContainer);\r\n\r\n"]},"metadata":{},"sourceType":"module"}